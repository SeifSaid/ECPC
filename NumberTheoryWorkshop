#include <bits/stdc++.h>
using namespace std;
using ll = long long;
#define fastio ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);cout<<setiosflags(ios::fixed)<<setprecision(15);
const ll MOD = 1e9+7;


// function to check if n is prime : isPrime(5) = true / isPrime(4) = false
// O(√n)
bool isPrime(ll n) { 
    if (n <= 1) return false;
    if (n == 2) return true;
    if (n%2 == 0) return false;
    for (ll i = 3; i*i <= n; i+=2)
        if (n % i == 0)
            return false;
    return true;
 }
 
// function to return a vector of all the factors / divisors of n
// Divisors(50) = {1, 50, 2, 25, 5, 10}
// O(√n)
 vector<ll > Divisors(ll n){
    vector<ll>divisors;
    for (ll i = 1; i <= sqrt(n); i++) {
        if (n % i == 0) {
            if (n / i == i)  // if n = i² (if i == sqrt(n))
                divisors.push_back(i);  
            else {
                divisors.push_back(i);
                divisors.push_back(n/i);
            }
        }
    } return divisors;
 }
 
// function to return a vector of all the prime factors of n (including their multiplicities)
// primeFactors(50) = {2, 5, 5}
// O(√n)
 vector<ll> primeFactors(ll n) {
    vector<ll>primefac;
    while (n % 2 == 0) { 
        primefac.push_back(2); 
        n = n/2; 
    } 
    for (ll i = 3; i*i <= n; i = i + 2) { // test only odd numbers
        while (n % i == 0) {
            primefac.push_back(i); 
            n = n/i; 
        } 
    } 
    if (n > 2)       // if n prime > 2
        primefac.push_back(n); 
    return primefac;
}

// function to return an array of bool of size N
// if sieve[k] == true then k is prime, else k is not prime
// O(N*log(log(n)))
vector<bool> SieveOfEratosthenes(ll n){
    vector<bool> sieve(n + 1, true); 
    sieve[0] = false; 
    sieve[1] = false;
    for (ll p = 2; p * p <= n; p++) {
        if (sieve[p] == true) {
            for (ll i = p * p; i <= n; i += p)
                sieve[i] = false;
        }
    }
    return sieve;
}
// When using Sieve:
// 1) Build the sieve array up to a limit (e.g., n=10^6) once in int main()
// 2) Store it in a global variable, to access it later in O(1)
// To define a global variable, we simply define it outside any function
// like this :
vector<bool> SieveGlobal;
// check the int main to see how we build this global variable


// function to calculate a^b % mod by using binary exponentiation
// O(log(b))
ll power(ll a, ll b, ll mod) {
    ll result = 1;
    while (b > 0) {
    if (b % 2 == 1) result = (result * a) % mod;
    a = (a * a) % mod;
    b /= 2; }
    return result;
}

// Modular Arithmetic
// (a*b)%mod = ((a%mod)*(b%mod))%mod
ll mult(ll a, ll b, ll mod) {
    return ((a % mod) * (b % mod)) % mod;
}
// (a+b)%mod = (a%mod+b%mod)%mod
ll sum(ll a, ll b, ll mod) {
    return (a % mod + b % mod) % mod;
}
// (a-b)%mod = (a%mod-b%mod+mod)%mod
ll sub(ll a, ll b, ll mod) {
    return (a % mod - b % mod + mod) % mod;
}
// (1/a)%mod = (a^(mod-2))%mod
ll inv(ll a, ll mod) {
    return power(a, mod - 2, mod);
}


// GCD : use built-in function __gcd(a,b) or use this function
ll gcd(ll a, ll b) {
    while (b) {
        ll temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}
//LCM
//% MOD to avoid overflow if a and b are big
ll lcm(ll a, ll b) {
    return (a / gcd(a, b) * b) % MOD;
}

void solve(){
    //access the global sieve vector in O(1) each test
    cout<<SieveGlobal[5]<<endl;
    cout<<SieveGlobal[6]<<endl;
}

int main(){
    fastio;
    int _;
    _=1; 
    //cin>>_;
    
    //build the global sieve vector before the test cases
    //build it with max size of n
    SieveGlobal=SieveOfEratosthenes(1000000);
    
    while(_--)
    {
       solve();
    }
    return 0;
}
